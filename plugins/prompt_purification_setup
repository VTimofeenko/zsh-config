# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# Based on:

# Purity
# by Kevin Lanni
# https://github.com/therealklanni/purity
# MIT License

# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# Display git status
# TODO to refactor with switch / using someting else than grep
# Might be faster using ripgrep too
jobs_count() {
	local JOBCOUNT=$(jobs | wc -l)
	if (( $JOBCOUNT > 0 )); then
		echo "[j: $JOBCOUNT]"
	fi
}

git_prompt_status() {
	local INDEX STATUS GREP_CMD

	if git rev-parse --git-dir 2>/dev/null 1>&2; then
		INDEX=$(command git status --porcelain -b 2> /dev/null)
		if command -v rg &> /dev/null
		then
			GREP_CMD="rg"
		else
			GREP_CMD="grep"
		fi

		STATUS=""

		# Untracked files
		local UNTRACKED_FILES=$(echo "$INDEX" | $GREP_CMD -c -e "^\?" 2>/dev/null)
		if [ ! -z $UNTRACKED_FILES ]; then
			STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED: $UNTRACKED_FILES $STATUS"
		fi

		# Added block
		local ADDED_FILES=$(echo $INDEX | $GREP_CMD -c -e '^A  ' -e '^M  ' -e '^MM ' 2>/dev/null)
		if [ ! -z $ADDED_FILES ]; then
			STATUS="$ZSH_THEME_GIT_PROMPT_ADDED: $ADDED_FILES $STATUS"
		fi

		# Modified block
		local MODIFIED_FILES=$(echo $INDEX | $GREP_CMD -c -e '^ M ' -e '^AM ' -e '^MM ' -e '^ T ' 2>/dev/null)
		if [ ! -z $MODIFIED_FILES ]; then
			STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED: $MODIFIED_FILES $STATUS"
		fi

		# Renamed block
		local RENAMED_FILES=$(echo $INDEX | $GREP_CMD -c -e '^R  ' 2>/dev/null)
		if [ ! -z $RENAMED_FILES ]; then
			STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED: $RENAMED_FILES $STATUS"
		fi

		local DELETED_FILES=$(echo $INDEX | $GREP_CMD -c -e '^ D ' -e '^D  ' -e '^AD ' 2>/dev/null)
		if [ ! -z $DELETED_FILES ]; then
			STATUS="$ZSH_THEME_GIT_PROMPT_DELETED: $DELETED_FILES $STATUS"
		fi

		if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
			STATUS="$ZSH_THEME_GIT_PROMPT_STASHED $STATUS"
		fi

		local UNMERGED_FILES=$(echo $INDEX | $GREP_CMD -c -e '^UU ' 2>/dev/null)
		if [ ! -z $UNMERGED_FILES ]; then
			STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED $STATUS"
		fi

		if $(echo "$INDEX" | $GREP_CMD '^## [^ ]\+ .*ahead' &> /dev/null); then
			STATUS="$ZSH_THEME_GIT_PROMPT_AHEAD $STATUS"
		fi

		if $(echo "$INDEX" | $GREP_CMD '^## [^ ]\+ .*behind' &> /dev/null); then
			STATUS="$ZSH_THEME_GIT_PROMPT_BEHIND $STATUS"
		fi

		if $(echo "$INDEX" | $GREP_CMD '^## [^ ]\+ .*diverged' &> /dev/null); then
			STATUS="$ZSH_THEME_GIT_PROMPT_DIVERGED $STATUS"
		fi

		if [[ ! -z "$STATUS" ]]; then
			echo " [ $STATUS]"
		fi
	fi
}


prompt_git_branch() {
	autoload -Uz vcs_info
	precmd_vcs_info() {
		vcs_info 2>/dev/null  # to suppress error message in .git directory
	}
	precmd_functions+=( precmd_vcs_info )
	setopt prompt_subst
	zstyle ':vcs_info:git:*' formats '%b'
}

prompt_git_info() {
	[ ! -z "$vcs_info_msg_0_" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX$vcs_info_msg_0_$ZSH_THEME_GIT_PROMPT_SUFFIX%f"
}

prompt_purity_precmd() {
	# Pass a line before each prompt
	#print -P ''
}

prompt_purification_setup() {
	# Display git branch

	autoload -Uz add-zsh-hook
	add-zsh-hook precmd prompt_purity_precmd

	ZSH_THEME_GIT_PROMPT_PREFIX=" %F{yellow}λ:%f%F{blue}"
	ZSH_THEME_GIT_PROMPT_DIRTY=""
	ZSH_THEME_GIT_PROMPT_CLEAN=""

	ZSH_THEME_GIT_PROMPT_ADDED="%F{green}+%f "
	ZSH_THEME_GIT_PROMPT_MODIFIED="%F{blue}%f "
	ZSH_THEME_GIT_PROMPT_DELETED="%F{red}x%f "
	ZSH_THEME_GIT_PROMPT_RENAMED="%F{magenta}➜%f "
	ZSH_THEME_GIT_PROMPT_UNMERGED="%F{yellow}═%f "
	ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{white}%f "
	ZSH_THEME_GIT_PROMPT_STASHED="%B%F{red}%f%b "
	ZSH_THEME_GIT_PROMPT_BEHIND="%B%F{red}%f%b "
	ZSH_THEME_GIT_PROMPT_AHEAD="%B%F{green}%f%b "

	prompt_git_branch
	RPROMPT='$(jobs_count) $(prompt_git_info) $(git_prompt_status)'
	PROMPT=$'%F{white}%~ %(!.%B%F{red}#.%B%F{blue}>)%f%b '
}

prompt_purification_setup
